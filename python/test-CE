#!/bin/bash -u


SCRIPTNAME=$0
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH

SCRIPTDIR=$(
  cd "$(dirname $SCRIPTNAME)"
  echo $PWD
)

if [[ $# -gt 0 ]]; then
  TM_GATW_URL=$1
  TM_GATW_SECRET=$2
  if [[ -z TM_GATW_SECRET ]]; then
    echo "[FATAL]Must specify both URL and gateway secret"
    exit 1
  fi
  # use a trap to tidy up on exit
  function tidyup {
    trap - 0 1 2 3 15
    sleep 1
    deleteAllPolicies.py $URL_AND_CREDENTIAL
    sleep 1
    deleteAllAPIs.py $URL_AND_CREDENTIAL
  }
  trap tidyup 0 1 2 3 15
else
  VERSION=5.0.12
  DESC="Python module test deployment"
  TM_CONTAINER=$(dsbctl create -v $VERSION -t "$DESC" -n -s | awk '/Creating container/ {print $NF}')
  TM_GATW_URL=$(dsbctl get $TM_CONTAINER gateway)
  TM_GATW_SECRET=$(dsbctl get $TM_CONTAINER secret)
  echo "[INFO]$TM_CONTAINER created, waiting for it to be ready"
  waitUp.py --gateway $TM_GATW_URL --time 20
  # use a trap to tidy up on exit
  function tidyup {
    trap - 0 1 2 3 15
    dsbctl delete $TM_CONTAINER
  }
  #trap tidyup 0 1 2 3 15
fi

# Create a variable to hold the dashboard URL and credentials. This will allow the code to be very similar between dashboard and gateway tests
URL_AND_CREDENTIAL="--gateway $TM_GATW_URL --cred $TM_GATW_SECRET"

function getListenPath {
  typeset api
  api="$1"
  echo "$api" | jq .proxy.listen_path
}

# Test that the environment is empty
numberofAPIs=$(getAPIs.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
if [[ $numberofAPIs -ne 0 ]]; then
  echo FAIL $TM_GATW_URL has $numberofAPIs APIs in it. It must be empty for this script to work
  exit 1
fi
numberofPolicies=$(getPolicies.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
if [[ $numberofAPIs -ne 0 ]]; then
  echo FAIL $TM_GATW_URL has $numberofPolicies policies in it. It must be empty for this script to work
  exit 1
fi


if true; then
  # API tests
  # Gateway createAPI
  echo "[INFO]API checks: "
  echo -n "  [INFO]Create: "
  resp=$(createAPI.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/API-template-auth.json --name httpbin)
  if [[ $? -lt 1 ]]; then
    APIID=$(echo $resp | jq -r .key)
    echo "SUCCESS ($APIID)"
  else
    echo FAIL
    exit 1
  fi
  sleep 1
  # Gateway getAPI
  echo -n "  [INFO]List API $APIID: "
  resp=$(getAPI.py $URL_AND_CREDENTIAL --apiid $APIID --verbose)
  APIID2=$(echo $resp | jq -r .api_id)
  if [[ $APIID = $APIID2 ]]; then
    echo "SUCCESS ($APIID2)"
  else
    echo FAIL
    exit 1
  fi
  # create a second API
  echo -n "  [INFO]Create Second API: "
  resp=$(createAPI.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/API-template-auth.json --name httpbin)
  if [[ $? -lt 1 ]]; then
    APIID2=$(echo $resp | jq -r .key)
    echo "SUCCESS: ($APIID)"
  else
    echo "FAILED to create second API"
    exit 1
  fi
  sleep 1
  echo -n "  [INFO]List both APIs: "
  # Gateway getAPIs
  if getAPIs.py $URL_AND_CREDENTIAL | grep -qiw $APIID; then
    if getAPIs.py $URL_AND_CREDENTIAL | grep -qiw $APIID2; then
      echo "SUCCESS ($APIID, $APIID2)"
    else
      echo FAIL second API $APIID2 missing
      exit 1
    fi
  else
    echo FAIL first API $APIID missing
    exit 1
  fi
  # Gateway deleteAPI
  # delete the apis to have an empty dashboard
  for API in $APIID $APIID2; do
    echo -n "  [INFO]Delete API $API: "
    resp=$(deleteAPI.py $URL_AND_CREDENTIAL --apiid $API)
    sleep 1
    if getAPIs.py $URL_AND_CREDENTIAL | grep -qiw $API; then
      echo FAIL $resp
      exit 1
    else
      echo SUCCESS
    fi
  done
  # Gateway createAPIs
  numberToCreate=10
  echo -n "  [INFO]Create APIs: "
  resp=$(createAPIs.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/API-template-auth.json --name test --number $numberToCreate)
  sleep 1
  numberCreated=$(getAPIs.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
  if [[ $numberCreated -eq $numberToCreate ]]; then
    echo SUCCESS $numberCreated created
  else
    echo FAIL $numberCreated of $numberToCreate created
    exit 1
  fi
  # Gateway updateAPI
  # create an API.
  echo "  [INFO]Update API: "
  echo -n "    [INFO]Create API: "
  resp=$(createAPI.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/API-template-auth.json --name httpbin)
  if [[ $? -lt 1 ]]; then
    APIID=$(echo $resp | jq -r .key)
    echo "SUCCESS ($APIID)"
  else
    echo FAIL
    exit 1
  fi
  sleep 1
  # retrieve the API, make a note of the listen path
  echo -n "    [INFO]getAPI $APIID: "
  APIJSON=$(getAPI.py $URL_AND_CREDENTIAL --apiid $APIID --verbose)
  if [[ -n $APIJSON ]]; then
    echo SUCCESS
  else
    echo FAIL
    exit 1
  fi
  # change the listen path in the json
  UPDATED_API_JSON=$(echo $APIJSON | jq '(.proxy.listen_path="/fred/")')
  # update the API
  TMPFILE=$(mktemp /tmp/XXXX-test-dashboard.json)
  echo $UPDATED_API_JSON > $TMPFILE
  resp=$(updateAPI.py $URL_AND_CREDENTIAL --template $TMPFILE --apiid $APIID)
  #rm $TMPFILE
  sleep 1
  # Retrieve the API and check the listen path is changed.
  # Reusing the variable UPDATED_API_JSON to contain the API definition retrieved from the dashboard
  # after posting the change back. It should be very like what was posted
  echo -n "    [INFO]updateAPI $APIID: "
  UPDATED_API_JSON=$(getAPI.py $URL_AND_CREDENTIAL --apiid $APIID --verbose)
  UPDATED_LP=$(getListenPath "$UPDATED_API_JSON")
  if [[ $UPDATED_LP = '"/fred/"' ]]; then
    echo SUCCESS
  else
    echo FAIL
    exit 1
  fi
  # Gateway deleteAllAPIs
  echo -n "  [INFO]Delete all APIs: "
  resp=$(deleteAllAPIs.py $URL_AND_CREDENTIAL)
  sleep 1
  numberRemaining=$(getAPIs.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
  if [[ $numberRemaining -eq 0 ]]; then
    echo SUCCESS no APIs left
  else
    echo FAIL $numberRemaining left
    exit 1
  fi
fi

# Policy tests
# Gateway createPolicy
if true; then
  echo "[INFO]Policy checks: "
  echo -n "  [INFO]Create an API to use: "
  resp=$(createAPI.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/API-template-auth.json --name httpbin)
  if [[ $? -lt 1 ]]; then
    APIID=$(echo $resp | jq -r .key)
    echo "SUCCESS ($APIID)"
  else
    echo FAIL
    exit 1
  fi
  sleep 1
  echo -n "  [INFO]Create a policy for $APIID: "
  resp=$(createPolicy.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/policy-template.json --apiid $APIID)
  if [[ $? -lt 1 ]]; then
    POLID=$(echo $resp | jq -r .key)
    echo "SUCCESS ($POLID)"
  else
    echo FAIL
    exit 1
  fi
  sleep 1
  # Gateway getPolicy
  echo -n "  [INFO]List Policy $POLID: "
  resp=$(getPolicy.py $URL_AND_CREDENTIAL --policy $POLID)
  POLID2=$(echo $resp | jq -r .id)
  if [[ $POLID = $POLID2 ]]; then
    echo "SUCCESS ($POLID2)"
  else
    echo FAIL
    exit 1
  fi
  # create a second Policy
  echo -n "  [INFO]Create Second Policy: "
  resp=$(createPolicy.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/policy-template.json --apiid $APIID)
  if [[ $? -lt 1 ]]; then
    POLID2=$(echo $resp | jq -r .key)
    echo "SUCCESS ($POLID2)"
  else
    echo "FAILED to create second policy"
    exit 1
  fi
  sleep 1
  echo -n "  [INFO]List both policies: "
  # Gateway getPolicies
  if getPolicies.py $URL_AND_CREDENTIAL | grep -qiw $POLID; then
    if getPolicies.py $URL_AND_CREDENTIAL | grep -qiw $POLID2; then
      echo "SUCCESS ($POLID, $POLID2)"
    else
      echo FAIL second policy $POLID2 missing
      exit 1
    fi
  else
    echo FAIL first policy $POLID missing
    exit 1
  fi
  # Gateway deletePolicy
  # delete both policies to have none
  for POL in $POLID $POLID2; do
    echo -n "  [INFO]Delete Policy $POL: "
    resp=$(deletePolicy.py $URL_AND_CREDENTIAL --policy $POL)
    sleep 1
    if getPolicies.py $URL_AND_CREDENTIAL | grep -qiw $POL; then
      echo FAIL $resp
      # last policy always failes
      # exit 1
    else
      echo SUCCESS
    fi
  done

  # Gateway createPolicies
  numberToCreate=10
  echo -n "  [INFO]Create Policies: "
  resp=$(createPolicies.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/policy-template.json --number $numberToCreate --apiid $APIID)
  sleep 2
  numberCreated=$(getPolicies.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
  if [[ $numberCreated -eq $numberToCreate ]]; then
    echo SUCCESS $numberCreated created
  else
    echo FAIL $numberCreated of $numberToCreate created
    exit 1
  fi
  # Gateway deleteAllPolicies
  echo -n "  [INFO]Delete all Policies: "
  resp=$(deleteAllPolicies.py $URL_AND_CREDENTIAL)
  sleep 2
  numberRemaining=$(getPolicies.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
  if [[ $numberRemaining -eq 0 ]]; then
    echo SUCCESS no Policies left
  else
    echo FAIL $numberRemaining left
    #exit 1
  fi
  # Gateway deleteAllAPIs
  echo -n "  [INFO]Delete all APIs: "
  resp=$(deleteAllAPIs.py $URL_AND_CREDENTIAL)
  numberRemaining=$(getAPIs.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
  if [[ $numberRemaining -eq 0 ]]; then
    echo SUCCESS no APIs left
  else
    echo FAIL $numberRemaining left
    exit 1
  fi
fi

# Key tests
# Gateway createKeyForAPI
if true; then
  echo "[INFO]Key checks: "
  echo -n "  [INFO]Create an API to use: "
  resp=$(createAPI.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/API-template-auth.json --name httpbin)
  if [[ $? -lt 1 ]]; then
    APIID=$(echo $resp | jq -r .ID)
    echo "SUCCESS ($APIID)"
  else
    echo FAIL
    exit 1
  fi
  echo -n "  [INFO]Create a key for $APIID: "
  KEY=$(createKeyForAPI.py $URL_AND_CREDENTIAL --apiid $APIID)
  if [[ $? -lt 1 ]]; then
    KEY=$(echo $KEY | xargs)
    echo "SUCCESS ($KEY)"
  else
    echo "FAIL ($KEY)"
    exit 1
  fi
  echo -n "  [INFO]Retrieve key: "
  resp=$(getKey.py $URL_AND_CREDENTIAL --keyid $KEY)
  if [[ $? -lt 1 ]]; then
    echo "SUCCESS"
  else
    echo FAIL
    exit 1
  fi
  echo -n "  [INFO]Delete key: "
  resp=$(deleteKey.py $URL_AND_CREDENTIAL --keyid $KEY)
  if [[ $? -lt 1 ]]; then
    echo "SUCCESS"
  else
    echo FAIL
    exit 1
  fi
  echo -n "  [INFO]Create a policy for $APIID: "
  resp=$(createPolicy.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/policy-template.json --apiid $APIID)
  if [[ $? -lt 1 ]]; then
    POLID=$(echo $resp | jq -r .Message)
    echo "SUCCESS ($POLID)"
  else
    echo FAIL
    exit 1
  fi
  echo -n "  [INFO]Create a key from policy $POLID for API $APIID: "
  sleep 2
  resp=$(createKeyFromPolicy.py $URL_AND_CREDENTIAL --policy $POLID)
  if [[ $? -lt 1 ]]; then
    echo "SUCCESS ($resp)"
    KEY=$resp
  else
    echo FAIL $resp
    exit 1
  fi
  echo -n "  [INFO]Counting keys "
  count=$(getKeys.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
  echo $count
  echo -n "  [INFO]Deleting all keys "
  resp=$(deleteAllKeys.py $URL_AND_CREDENTIAL)
  count=$(getKeys.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
  if [[ $count -eq 0 ]]; then
    echo SUCCESS
  else
    echo FAIL $count remain
  fi
fi
