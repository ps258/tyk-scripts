#!/bin/bash -u

SCRIPTNAME=$0
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH

SCRIPTDIR=$(
  cd "$(dirname $SCRIPTNAME)"
  echo $PWD
)

TM_ADMIN_USER=tyk@admin.com
TM_ADMIN_PASSWORD=ABC-123

VERSION=${ARGV[1]-"5.0.12"}
DESC="Python module test deployment"
. ~/.tyk-sandbox

function continerAdminkey {
  typeset container
  container=$1
  sbctl get $container key
}

function getListenPath {
  typeset api
  api="$1"
  echo "$api" | jq .api_definition.proxy.listen_path
}

TM_CONTAINER=$(sbctl create -v $VERSION -t "$DESC" -n | awk '/Creating container/ {print $NF}')

# set a trap to delete the sandbox at exit
function tidyup {
	echo "[INFO]Deleting $(sbctl delete $TM_CONTAINER)"
}
trap tidyup 0 1 2 3 15

TM_ADMIN_SECRET=$(sbctl get $TM_CONTAINER admin_secret)
TM_DASH_URL=$(sbctl get $TM_CONTAINER dashboard)
TM_GATW_URL=$(sbctl get $TM_CONTAINER gateway)
TM_GATW_SECRET=$(sbctl get $TM_CONTAINER secret)

echo "[INFO]Bootstrapping $TM_DASH_URL"
bootstrap.py --dashboard $TM_DASH_URL --adminSecret $TM_ADMIN_SECRET --licence $SBX_LICENSE --adminEmail $TM_ADMIN_USER --adminPassword $TM_ADMIN_PASSWORD

sleep 2
TM_ADMIN_KEY=$(sbctl get $TM_CONTAINER key)
echo "[INFO]$TM_CONTAINER created"
echo
if true; then
  echo TM_ADMIN_SECRET=$TM_ADMIN_SECRET
  echo TM_DASH_URL=$TM_DASH_URL
  echo TM_GATW_URL=$TM_GATW_URL
  echo TM_GATW_SECRET=$TM_GATW_SECRET
  echo TM_ADMIN_KEY=$TM_ADMIN_KEY
  echo TM_ADMIN_USER=$TM_ADMIN_USER
  echo TM_ADMIN_PASSWORD=$TM_ADMIN_PASSWORD
  echo
fi

# Create a variable to hold the dashboard URL and credentials. This will allow the code to be very similar between dashboard and gateway tests
URL_AND_CREDENTIAL="--dashboard $TM_DASH_URL --cred $TM_ADMIN_KEY"

# check that bootstrap succeeded.
echo "[INFO]Bootstrap checks"
echo -n " [INFO]Check that org was created: "
resp=$(getOrganisations.py --dashboard $TM_DASH_URL --adminsecret $TM_ADMIN_SECRET)
TM_ORG=$(echo $resp | cut -d, -f1)
if [[ -z $TM_ORG ]]; then
  echo FAIL
  exit 1
else
  echo "SUCCESS ($TM_ORG)"
fi
echo -n " [INFO]Check that user was created: "
if [[ -z $TM_ADMIN_KEY ]]; then
  echo FAIL, no TM_ADMIN_KEY
  exit 1
else
  resp=$(getUsers.py $URL_AND_CREDENTIAL | sed -e 1d)
  TM_USER_ID=$(echo $resp | grep -v \# | cut -d, -f1)
  if [[ -z $TM_USER_ID ]]; then
    echo FAIL, no TM_USER_ID
    exit 1
  else
    echo "SUCCESS ($TM_USER_ID)"
  fi
fi
echo

echo -n "[INFO]Waiting up to 20s for gateway on $TM_GATW_URL to be ready: "
waitUp.py --gateway $TM_GATW_URL --time 20

if [[ $? -lt 1 ]]; then
  echo OK
else
  echo FAIL
  exit 1
fi


if true; then
	# API tests
	# Dashboard createAPI
	echo "[INFO]API checks: "
	echo -n "  [INFO]Create: "
	resp=$(createAPI.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/API-template-auth.json --name httpbin)
	if [[ $? -lt 1 ]]; then
		APIID=$(echo $resp | jq -r .ID)
		echo "SUCCESS ($APIID)"
	else
		echo FAIL
		exit 1
	fi
	# Dashboard getAPI
	echo -n "  [INFO]List API $APIID: "
	resp=$(getAPI.py $URL_AND_CREDENTIAL --apiid $APIID)
	APIID2=$(echo $resp | jq -r .api_definition.api_id)
	if [[ $APIID = $APIID2 ]]; then
		echo "SUCCESS ($APIID2)"
	else
		echo FAIL
		exit 1
	fi
	# create a second API
	echo -n "  [INFO]Create Second API: "
	resp=$(createAPI.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/API-template-auth.json --name httpbin)
	if [[ $? -lt 1 ]]; then
		APIID2=$(echo $resp | jq -r .ID)
		echo "SUCCESS: ($APIID)"
	else
		echo "FAILED to create second API"
		exit 1
	fi
	echo -n "  [INFO]List both APIs: "
	# Dashboard getAPIs
	if getAPIs.py $URL_AND_CREDENTIAL | grep -qiw $APIID; then
		if getAPIs.py $URL_AND_CREDENTIAL | grep -qiw $APIID2; then
			echo "SUCCESS ($APIID, $APIID2)"
		else
			echo FAIL second API $APIID2 missing
			exit 1
		fi
	else
		echo FAIL first API $APIID missing
		exit 1
	fi
	# Dashboard deleteAPI
	# delete the apis to have an empty dashboard
	for API in $APIID $APIID2; do
		echo -n "  [INFO]Delete API $API: "
		resp=$(deleteAPI.py $URL_AND_CREDENTIAL --apiid $API)
		if getAPIs.py $URL_AND_CREDENTIAL | grep -qiw $API; then
			echo FAIL $resp
			exit 1
		else
			echo SUCCESS
		fi
	done
	# Dashboard createAPIs
	numberToCreate=10
	echo -n "  [INFO]Create APIs: "
	resp=$(createAPIs.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/API-template-auth.json --name test --number $numberToCreate)
	numberCreated=$(getAPIs.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
	if [[ $numberCreated -eq $numberToCreate ]]; then
		echo SUCCESS $numberCreated created
	else
		echo FAIL $numberCreated of $numberToCreate created
		exit 1
	fi
	# Dashboard updateAPI
	# create an API.
	echo "  [INFO]Update API: "
	echo -n "    [INFO]Create API: "
	resp=$(createAPI.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/API-template-auth.json --name httpbin)
	if [[ $? -lt 1 ]]; then
		APIID=$(echo $resp | jq -r .ID)
		echo "SUCCESS ($APIID)"
	else
		echo FAIL
		exit 1
	fi
	# retrieve the API, make a note of the listen path
	echo -n "    [INFO]getAPI $APIID: "
	APIJSON=$(getAPI.py $URL_AND_CREDENTIAL --apiid $APIID)
	if [[ -n $APIJSON ]]; then
		echo SUCCESS
	else
		echo FAIL
		exit 1
	fi
	# change the listen path in the json
	UPDATED_API_JSON=$(echo $APIJSON | jq '(.api_definition.proxy.listen_path="/fred/")')
	# update the API
	TMPFILE=$(mktemp /tmp/XXXX-test-dashboard.json)
	echo $UPDATED_API_JSON > $TMPFILE
	resp=$(updateAPI.py $URL_AND_CREDENTIAL --template $TMPFILE --apiid $APIID)
	rm $TMPFILE
	# Retrieve the API and check the listen path is changed.
	# Reusing the variable UPDATED_API_JSON to contain the API definition retrieved from the dashboard
	# after posting the change back. It should be very like what was posted
	echo -n "    [INFO]updateAPI $APIID: "
	UPDATED_API_JSON=$(getAPI.py $URL_AND_CREDENTIAL --apiid $APIID)
	UPDATED_LP=$(getListenPath "$UPDATED_API_JSON")
	if [[ $UPDATED_LP = '"/fred/"' ]]; then
		echo SUCCESS
	else
		echo FAIL
		exit 1
	fi
	# Dashboard deleteAllAPIs
	echo -n "  [INFO]Delete all APIs: "
	resp=$(deleteAllAPIs.py $URL_AND_CREDENTIAL)
	numberRemaining=$(getAPIs.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
	if [[ $numberRemaining -eq 0 ]]; then
		echo SUCCESS no APIs left
	else
		echo FAIL $numberRemaining left
		exit 1
	fi
fi

# Policy tests
# Dashboard createPolicy
if true; then
  echo "[INFO]Policy checks: "
  echo -n "  [INFO]Create an API to use: "
  resp=$(createAPI.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/API-template-auth.json --name httpbin)
  if [[ $? -lt 1 ]]; then
    APIID=$(echo $resp | jq -r .ID)
    echo "SUCCESS ($APIID)"
  else
    echo FAIL
    exit 1
  fi
  echo -n "  [INFO]Create a policy for $APIID: "
  resp=$(createPolicy.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/policy-template.json --apiid $APIID)
  if [[ $? -lt 1 ]]; then
    POLID=$(echo $resp | jq -r .Message)
    echo "SUCCESS ($POLID)"
  else
    echo FAIL
    exit 1
  fi
  # Dashboard getPolicy
  echo -n "  [INFO]List Policy $POLID: "
  resp=$(getPolicy.py $URL_AND_CREDENTIAL --policy $POLID)
  POLID2=$(echo $resp | jq -r ._id)
  if [[ $POLID = $POLID2 ]]; then
    echo "SUCCESS ($POLID2)"
  else
    echo FAIL
    exit 1
  fi
  # create a second Policy
  echo -n "  [INFO]Create Second Policy: "
  resp=$(createPolicy.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/policy-template.json --apiid $APIID)
  if [[ $? -lt 1 ]]; then
    POLID2=$(echo $resp | jq -r .Message)
    echo "SUCCESS ($POLID2)"
  else
    echo "FAILED to create second policy"
    exit 1
  fi
  echo -n "  [INFO]List both policies: "
  # Dashboard getPolicies
  if getPolicies.py $URL_AND_CREDENTIAL | grep -qiw $POLID; then
    if getPolicies.py $URL_AND_CREDENTIAL | grep -qiw $POLID2; then
      echo "SUCCESS ($POLID, $POLID2)"
    else
      echo FAIL second policy $POLID2 missing
      exit 1
    fi
  else
    echo FAIL first policy $POLID missing
    exit 1
  fi
  # Dashboard deletePolicy
  # delete both policies to have none
  for POL in $POLID $POLID2; do
    echo -n "  [INFO]Delete Policy $POL: "
    resp=$(deletePolicy.py $URL_AND_CREDENTIAL --policy $POL)
    if getPolicies.py $URL_AND_CREDENTIAL | grep -qiw $POL; then
      echo FAIL $resp
      exit 1
    else
      echo SUCCESS
    fi
  done
  # Dashboard createPolicies
  numberToCreate=10
  echo -n "  [INFO]Create Policies: "
  echo createPolicies.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/policy-template.json --number $numberToCreate --apiid $APIID
  resp=$(createPolicies.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/policy-template.json --number $numberToCreate --apiid $APIID)
  numberCreated=$(getPolicies.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
  if [[ $numberCreated -eq $numberToCreate ]]; then
    echo SUCCESS $numberCreated created
  else
    echo FAIL $numberCreated of $numberToCreate created
    exit 1
  fi
  # Dashboard deleteAllPolicies.py
  echo -n "  [INFO]Delete all Policies: "
  resp=$(deleteAllPolicies.py $URL_AND_CREDENTIAL)
  numberRemaining=$(getPolicies.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
  if [[ $numberRemaining -eq 0 ]]; then
    echo SUCCESS no Policies left
  else
    echo FAIL $numberRemaining left
    exit 1
  fi
  # Dashboard deleteAllAPIs
	echo -n "  [INFO]Delete all APIs: "
	resp=$(deleteAllAPIs.py $URL_AND_CREDENTIAL)
	numberRemaining=$(getAPIs.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
	if [[ $numberRemaining -eq 0 ]]; then
		echo SUCCESS no APIs left
	else
		echo FAIL $numberRemaining left
		exit 1
	fi
fi

# Key tests
# Dashboard createKeyForAPI
if true; then
  echo "[INFO]Key checks: "
  echo -n "  [INFO]Create an API to use: "
  resp=$(createAPI.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/API-template-auth.json --name httpbin)
  if [[ $? -lt 1 ]]; then
    APIID=$(echo $resp | jq -r .ID)
    echo "SUCCESS ($APIID)"
  else
    echo FAIL
    exit 1
  fi
  echo -n "  [INFO]Create a key for $APIID: "
  KEY=$(createKeyForAPI.py $URL_AND_CREDENTIAL --apiid $APIID)
  if [[ $? -lt 1 ]]; then
    KEY=$(echo $KEY | xargs)
    echo "SUCCESS ($KEY)"
  else
    echo "FAIL ($KEY)"
    exit 1
  fi
  echo -n "  [INFO]Retrieve key: "
  resp=$(getKey.py $URL_AND_CREDENTIAL --keyid $KEY)
  if [[ $? -lt 1 ]]; then
    echo "SUCCESS"
  else
    echo FAIL
    exit 1
  fi
  echo -n "  [INFO]Delete key: "
  resp=$(deleteKey.py $URL_AND_CREDENTIAL --keyid $KEY)
  if [[ $? -lt 1 ]]; then
    echo "SUCCESS"
  else
    echo FAIL
    exit 1
  fi
  echo -n "  [INFO]Create a policy for $APIID: "
  resp=$(createPolicy.py $URL_AND_CREDENTIAL --template $SCRIPTDIR/policy-template.json --apiid $APIID)
  if [[ $? -lt 1 ]]; then
    POLID=$(echo $resp | jq -r .Message)
    echo "SUCCESS ($POLID)"
  else
    echo FAIL
    exit 1
  fi
  echo -n "  [INFO]Create a key from policy $POLID for API $APIID: "
  sleep 2
  resp=$(createKeyFromPolicy.py $URL_AND_CREDENTIAL --policy $POLID)
  if [[ $? -lt 1 ]]; then
    echo "SUCCESS ($resp)"
    KEY=$resp
  else
    echo FAIL $resp
    exit 1
  fi
  echo -n "  [INFO]Counting keys "
  count=$(getKeys.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
  echo $count
  echo -n "  [INFO]Deleting all keys "
  resp=$(deleteAllKeys.py $URL_AND_CREDENTIAL)
  count=$(getKeys.py $URL_AND_CREDENTIAL | grep -v \# | wc -l)
  if [[ $count -eq 0 ]]; then
    echo SUCCESS
  else
    echo FAIL $count remain
  fi
fi
